@using PizzaShop.Entities
@model PizzaShop.Entities.Dish
@inject IngredientService _ingredient

@{
    ViewData["Title"] = "Edit";
}

<h2>Edit</h2>

<h4>Dish</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="DishId" />
            <div class="form-group">
                <label asp-for="DishName" class="control-label"></label>
                <input asp-for="DishName" class="form-control" />
                <span asp-validation-for="DishName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                
                @foreach (var ingredient in _ingredient.All())
                {//todo refactor into html-helper?
                    var isChecked = "";
                    if (Model.DishIngredients.Exists(x => x.IngredientId == ingredient.IngredientId))
                    {
                        isChecked = "checked=\"checked\"";
                    }

                    <label class="control-label">@ingredient.IngredientName</label>
                    <input type="checkbox" @isChecked name="ingredient-@ingredient.IngredientId"/>

                }
            </div>
            @*todo dishtype*@
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
